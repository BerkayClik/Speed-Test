<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="../style.css" rel="stylesheet" type="text/css">
    <link href="https://unpkg.com/tailwindcss@%5E1.0/dist/tailwind.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <div class="flex justify-center">
        <button id="start-button" class="flex-1 bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded" onclick="startTest()">click</button>

        <div class="flex-1" id="download"></div>
        <div class="flex-1" id="upload"></div>
        <div class="flex-1" id="datadown"></div>
    </div>
    <link href="https://fonts.googleapis.com/css?family=Oswald" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <div class="speedbox__ping"><i class="fa fa-clock-o"></i> <span id='ping'>0</span> <span>ms</span></div>
    <div class="speedbox__up"><i class="fa fa-arrow-circle-up"></i> 1.1<span>mb/s</span></div>
    <div class="speedbox__down"><i class="fa fa-arrow-circle-down"></i> 8.7<span>mb/s</span></div>
    </div>

</div>

</body>

<script>
const startBtn = document.getElementById('start-button');
const pingElem = document.getElementById('ping');
const downloadElem = document.getElementById('download');
const uploadElem = document.getElementById('upload');
const anan = document.getElementById('datadown');

const socket = io();

let results = [];
let requestStart;
let testStart;
let startChunkSize = 100000; // 1 KiB
let chunkSize;
let junkData;


function startTest(){
startBtn.style.display = "none";
startPing();
}


/* Start tests */
function startPing(){
pingElem.textContent = '';
results = [];
ping();
}

function startDownload(){
downloadElem.innerHTML = '';
results = [];
chunkSize = startChunkSize;
testStart = Date.now();
download();
}

function startUpload(){
uploadElem.innerHTML = '';
results = [];
chunkSize = startChunkSize;
testStart = Date.now();
upload();
}


/* Emit events */
function ping(){
setTimeout(function() {
socket.emit("clientPing", Date.now())     
}, 50)  
}

function download(){
setTimeout(function() {
requestStart = Date.now();
socket.emit('download', chunkSize);   
}, 10)
}

function upload(){
setTimeout(function() {
let data = randomBytes(chunkSize);
requestStart = Date.now();
socket.emit('upload', data);
}, 10)
}

/* Handle Events */
socket.on('serverPong', function(data) {
let latency = Date.now() - data;
pingElem.innerHTML = latency;
results.push(latency);
if (results.length === 15){
let result = Math.min.apply(null, results);
console.log(result + 'ms');
pingElem.innerHTML = result;
startDownload();
}else{
ping();
}
});

let dataDownloaded = 0;
socket.on('download', function(data) {
let elapsed = ( Date.now() - requestStart ) / 1000; //in sec
let received = data.byteLength * 8 / 1024 / 1024;
let result = received / elapsed;
junkData = data;
results.push(result);
downloadElem.innerHTML = rounded(result) + " Mbit/s";
if(Date.now() - testStart > 1000 * 10){
let max = Math.max.apply(null, results);
downloadElem.innerHTML = rounded(max) + " Mbit/s";
startUpload();
}else{
chunkSize = calcChunk(result);

dataDownloaded += chunkSize;
console.log(chunkSize);
anan.innerHTML = rounded(dataDownloaded)*0.000000125 + " Mbit/s";
download();
}
})

socket.on('upload', function() {
let elapsed = ( Date.now() - requestStart ) / 1000; //in sec
let sent = chunkSize * 8 / 1024 / 1024;
let result = sent / elapsed;
results.push(result);
uploadElem.innerHTML = rounded(result) + " Mbit/s";
if(Date.now() - testStart > 1000 * 10){
let max = Math.max.apply(null, results);
uploadElem.innerHTML = rounded(max) + " Mbit/s";
startBtn.style.display = "block";
startBtn.innerHTML = "RUN AGAIN";
}else{
chunkSize = calcChunk(result);
console.log(chunkSize);
upload();
}
})

/* Helpers */
function rounded(num){ 
return Math.round((num + Number.EPSILON) * 100) / 100
}

function calcChunk(data){
let value = (data * 1024 * 1024 / 8) / 4;
return value;
}

function randomBytes(size) {
var str = '';
for (var i = 0; i < size; i++) {
var randByte = parseInt(Math.random() * 256, 10);
randByte = randByte.toString(16);
if (randByte.length == 1) {
    randByte = "0" + randByte;
}
str += randByte;
}
return str;
}


let speed = $("#speed");
let updatedSpeed 

speed.keyup(function() {
  updatedSpeed = Math.round(speed.val()*180/100)-45;

  $("#speedbox-score").css("transform","rotate("+updatedSpeed+"deg)");
  console.log(updatedSpeed);
});

</script>
</html>
<style>
    body {
  padding: 1em;
  font-family: "Oswald";
}
* {
  margin: 0;
  padding: 0;
}
.legend {
  color: #333;
}
.speedbox {
  margin: 5em;
  height: 200px;
  width: 200px;
  display: flex;
  display: -webkit-flex;
  flex-direction: column;
  -webkit-flex-direction: column;
  align-items: center;
  -webkit-align-items: center;
  position: relative;
}
.speedbox__groove {
  height: 100px;
  width: 200px;
  background: transparent;
  border-top-left-radius: 100px;
  border-top-right-radius: 100px;
  border: 20px solid #eee;
  border-bottom: 0;
  box-sizing: border-box;
  position: absolute;
  left: 0;
  top: 0;
}
.speedbox__score {
  position: absolute;
  left: 0;
  top: 0;
  transform: rotate(-45deg);
  -webkit-transform: rotate(0deg);
  height: 200px;
  width: 200px;
  background: transparent;
  border-radius: 50%;
  border: 20px solid #5c6f7b;
  border-color: transparent transparent #5c6f7b #5c6f7b;
  box-sizing: border-box;
  cursor: pointer;
  z-index: 1;
  transition: transform 0.3s ease;
}
.speedbox__base {
  width: 240px;
  height: 100px;
  background: white;
  position: relative;
  top: 100px;
  z-index: 20;
}
.speedbox__base:before {
  content: "";
  width: 240px;
  position: absolute;
  top: 0;
  border-bottom: 1px solid #eee;
  box-shadow: 1px 3px 15px rgba(0, 0, 0, 0.5);
}
.speedbox__odo {
  text-align: center;
  position: absolute;
  color: #5c6f7b;
  bottom: 100px;
  left: 50%;
  transform: translateX(-50%);
}
.speedbox__odo i {
  font-size: 13px;
  opacity: 0.6;
}
.speedbox__odo > div {
  margin-bottom: 0;
}
.speedbox__odo span {
  font-size: 0.7em;
}
.speedbox__ping {
  font-size: 13px;
}
.speedbox__up {
  font-size: 13px;
  line-height: 1.5em;
}
.speedbox__down {
  font-size: 25px;
  text-shadow: 0 0 3px rgba(0, 0, 0, 0.2);
  line-height: 1.2em;
}

</style>