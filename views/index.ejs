<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CS468 Speed Test</title>
    <link href="../style.css" rel="stylesheet" type="text/css">
    <link href="https://unpkg.com/tailwindcss@%5E1.0/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Oswald" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
</div>

  <!-- Tailwind CSS -->
  <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">




  <div class="p-10 grid grid-cols-1 sm:grid-cols-1 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-3 gap-5">
    <!--Card 1-->
    <div class="rounded overflow-hidden shadow-lg" style = "text-align: center;">
      <img class="w-full" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/OOjs_UI_icon_download.svg/1200px-OOjs_UI_icon_download.svg.png" alt="download">
      <div class="px-6 py-4">
        <div class="font-bold text-xl mb-2">Download Speed</div>
        <div class="speedbox__down"><i class="fa fa-arrow-circle-down"></i><span id='download'></span><span>0 Mbps</span></div>
        <p class="text-gray-700 text-base">
          On below you can find how much data you have downloaded.
        </p>
      </div>
      <div class="px-6 pt-4 pb-2">
        <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2 text-base" style="text-align: left;">Downloaded File Size:</span>
        <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2 text-base" id = "datadown">0 MB</span>
      </div>
    </div>
    <!--Card 2-->
    <div class="rounded overflow-hidden shadow-lg" style = "text-align: center;">
      <img class="w-full" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/OOjs_UI_icon_upload.svg/600px-OOjs_UI_icon_upload.svg.png" alt="upload">
      <div class="px-6 py-4">
        <div class="font-bold text-xl mb-2">Upload Speed</div>
        <div class="speedbox__up" ><i class="fa fa-arrow-circle-up"></i> <span id='upload' ></span><span>0 Mbps</span></div> 
        <p class="text-gray-700 text-base">
          On below you can find how much data you have uploaded.
        </p>
      </div>
      <div class="px-6 pt-4 pb-2">
        <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2 text-base" style="text-align: left;">Uploaded File Size:</span>
        <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2 text-base" id="datauploaded">0 MB</span>
      </div>
    </div>

    <!--Card 3-->
    <div class="rounded overflow-hidden shadow-lg" style = "text-align: center;">
      <img class="w-full" src="https://cdn0.iconfinder.com/data/icons/navigation-set-arrows-part-one/32/DoubleArrowLeftRight-512.png" alt="ping">
      <div class="px-6 py-4">
        <div class="font-bold text-xl mb-2">Ping</div>
        <p class=" text-gray-700 text-base">
          <br>
          Between the Heroku server and your computer.
        </p>
        <br>
        <span class="font-bold text-xl mb-2 inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2" id = "ping";> ms</span>
      </div>
    </div>
  </div>
</div>
<div class="flex justify-center">
  <button id="start-button" class="bg-green-500 hover:bg-green-400 text-white font-bold py-2 px-4 border-b-4 border-green-700 hover:border-green-500 rounded-full w-1/2 text-lg"  onclick="startTest()">Click Here to Start the Test!</button>
</div>

<div class="container mx-auto px-4 sm:px-8" id = "table" >
  <div class="py-8">
      <div>
          <h2 class="text-2xl font-semibold leading-tight">Previous Results</h2>
      </div>
      <div class="-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto">
          <div class="inline-block min-w-full shadow rounded-lg overflow-hidden">
              <table class="min-w-full leading-normal">
                  <thead>
                      <tr>
                          <th
                              class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider">
                              Download
                          </th>
                          <th
                              class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider">
                              Download Fıle Sıze
                          </th>

                          <th
                              class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider">
                              Upload
                          </th>
                          <th
                              class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider">
                              Uploaded Fıle Sıze
                          </th>
                          <th
                              class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider">
                              Tıme
                          </th>
                          <th
                          class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider">
                          Pıng
                      </th>
                      </tr>
                  </thead>
                  <tbody id = "tbody">
                  </tbody>
              </table>
          </div>
      </div>
  </div>
</div>
</body>


<script>

renderTable = () =>{
  str = ""
  for(let i = 0; i< clickCount; i++){
    str += ` <tr>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                          <p class="text-gray-900 whitespace-no-wrap text-center" >${downloads[i]} Mbps</p>
                      </td>
                      
                      <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap text-center">${downloadSizes[i]}</p>
                        </td>
                          <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                              <p class="text-gray-900 whitespace-no-wrap text-center">${uploads[i]} Mbps</p>
                          </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                          <p class="text-gray-900 whitespace-no-wrap text-center">${uploadSizes[i]}</p>
                      </td>
                      <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                      <p class="text-gray-900 whitespace-no-wrap text-center" id = "time">${dates[i]}</p>
                  </td>
                      <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                        <p class="text-gray-900 whitespace-no-wrap text-center">${pings[i]}</p>
                    </td>
                   
                      </tr>`

  }
  return str

}

let clickCount = 0;
let downloads = []
let uploads = []
let pings = []
let dates = []
let downloadSizes = []
let uploadSizes = []

const table = document.getElementById('table');
const startBtn = document.getElementById('start-button');
const pingElem = document.getElementById('ping');
const downloadElem = document.getElementById('download');
const uploadElem = document.getElementById('upload');
const downloadedData = document.getElementById('datadown');
const uploadedData = document.getElementById('datauploaded');
const dataPlace = document.getElementById('datauploaded');

const socket = io();

let results = [];
let requestStart;
let testStart;
let startbitsSentSize = 100000; // 1 KiB
let bitsSentSize;
let junkData;


function startTest(){
dataDownloaded = 0;
dataUploaded = 0;
clickCount++;
startBtn.innerText = "Stop Test!"
startBtn.onclick = () => {
  location.reload();
}

startPing();
}

function startPing(){
pingElem.textContent = '';
results = [];
ping();
}

function startDownload(){
downloadElem.innerHTML = '';
results = [];
bitsSentSize = startbitsSentSize;
testStart = Date.now();
download();
}

function startUpload(){
uploadElem.innerHTML = '';
results = [];
bitsSentSize = startbitsSentSize;
testStart = Date.now();
upload();
}

function ping(){
setTimeout(function() {
socket.emit("userPingValue", Date.now())     
}, 50)  
}

function download(){
setTimeout(function() {
requestStart = Date.now();
socket.emit('download', bitsSentSize);   
}, 10)
}

function upload(){
setTimeout(function() {
let data = randomBytes(bitsSentSize);
requestStart = Date.now();
socket.emit('upload', data);
}, 10)
}

/* Handle Events */
socket.on('serverPingValue', function(data) {
let latency = Date.now() - data;
pingElem.innerHTML = latency +" ms";
results.push(latency);
if (results.length === 15){
let result = Math.min.apply(null, results);
console.log(result + 'ms');
pingElem.innerHTML = result + " ms";
startDownload();
}else{
ping();
}
});

let dataDownloaded = 0;
socket.on('download', function(data) {
let elapsed = ( Date.now() - requestStart ) / 1000; //in sec
let received = data.byteLength * 8 / 1024 / 1024;
let result = received / elapsed;
junkData = data;
results.push(result);
downloadElem.innerHTML = rounded(result);
if(Date.now() - testStart > 1000 * 10){
let max = Math.max.apply(null, results);
downloadElem.innerHTML = rounded(max);
startUpload();
}else{
bitsSentSize = calcbitsSent(result);

dataDownloaded += bitsSentSize;
downloadedData.innerHTML = rounded(rounded(dataDownloaded)*0.000000125) + " MB";
download();
}
})

let dataUploaded = 0;
socket.on('upload', function() {
let elapsed = ( Date.now() - requestStart ) / 1000; //in sec
let sent = bitsSentSize * 8 / 1024 / 1024;
let result = sent / elapsed;
results.push(result);
uploadElem.innerHTML = rounded(result);
if(Date.now() - testStart > 10000){
let max = Math.max.apply(null, results);
uploadElem.innerHTML = rounded(max);
startBtn.style.display = "block";
startBtn.innerText = "RUN AGAIN";
var today = new Date();
var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' '+today.getHours()+':'+today.getMinutes();
downloads.push(downloadElem.innerText)
uploads.push(uploadElem.innerText)
pings.push(pingElem.innerText)
downloadSizes.push(downloadedData.innerText)
uploadSizes.push(uploadedData.innerText)
dates.push(date)
document.getElementById('tbody').innerHTML =  renderTable() 
startBtn.onclick = startTest;
}else{
bitsSentSize = calcbitsSent(result);
dataUploaded += bitsSentSize;
uploadedData.innerHTML = rounded(rounded(dataUploaded)*0.000000125) + " MB";
upload();
}

})

function rounded(num){ 
return Math.round((num + Number.EPSILON) * 100) / 100
}

function calcbitsSent(data){
let value = (data * 1024 * 1024 / 8) * Math.floor(Math.random() * 6) + 3  ;
return value;
}

function randomBytes(size) {
var str = '';
for (var i = 0; i < size; i++) {
var randByte = parseInt(Math.random() * 256, 10);
randByte = randByte.toString(16);
if (randByte.length == 1) {
    randByte = "0" + randByte;
}
str += randByte;
}
return str;
}

</script>
</html>
<style>
    body {
  padding: 1em;
  font-family: "Oswald";
}
* {
  margin: 0;
  padding: 0;
}
.legend {
  color: #333;
}
.speedbox {
  margin: 5em;
  height: 200px;
  width: 200px;
  display: flex;
  display: -webkit-flex;
  flex-direction: column;
  -webkit-flex-direction: column;
  align-items: center;
  -webkit-align-items: center;
  position: relative;
}
.speedbox__groove {
  height: 100px;
  width: 200px;
  background: transparent;
  border-top-left-radius: 100px;
  border-top-right-radius: 100px;
  border: 20px solid #eee;
  border-bottom: 0;
  box-sizing: border-box;
  position: absolute;
  left: 0;
  top: 0;
}
.speedbox__score {
  position: absolute;
  left: 0;
  top: 0;
  transform: rotate(-45deg);
  -webkit-transform: rotate(0deg);
  height: 200px;
  width: 200px;
  background: transparent;
  border-radius: 50%;
  border: 20px solid #5c6f7b;
  border-color: transparent transparent #5c6f7b #5c6f7b;
  box-sizing: border-box;
  cursor: pointer;
  z-index: 1;
  transition: transform 0.3s ease;
}
.speedbox__base {
  width: 240px;
  height: 100px;
  background: white;
  position: relative;
  top: 100px;
  z-index: 20;
}
.speedbox__base:before {
  content: "";
  width: 240px;
  position: absolute;
  top: 0;
  border-bottom: 1px solid #eee;
  box-shadow: 1px 3px 15px rgba(0, 0, 0, 0.5);
}
.speedbox__odo {
  text-align: center;
  position: absolute;
  color: #5c6f7b;
  bottom: 100px;
  left: 50%;
  transform: translateX(-50%);
}
.speedbox__odo i {
  font-size: 13px;
  opacity: 0.6;
}
.speedbox__odo > div {
  margin-bottom: 0;
}
.speedbox__odo span {
  font-size: 0.7em;
}
.speedbox__ping {
  font-size: 13px;
}
.speedbox__up {
  font-size: 25px;
  line-height: 1.2em;
}
.speedbox__down {
  font-size: 25px;
  text-shadow: 0 0 3px rgba(0, 0, 0, 0.2);
  line-height: 1.2em;
}

</style>